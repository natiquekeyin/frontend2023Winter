Full stack developers?? Efficient in both front-end and back-end of applications!

Front-end Technologies: HTML, CSS, JAVASCRIPT...

MERN:MongoDB, Express JS, React, Node.js
MEAN:MongoDB, Express JS, Angular, Node.js

REACT!
A JavaScript library for building User Interfaces
[HTML, CSS, JavaScript]

    Very intuitive way to develop highly responsive user interfaces....
    It gives us divide and rule of application ...[separate concerns -- the application will have independent areas which we can easily debug or work on...]
    It gives us the ability to develop "SPA" (Single page applications) -- SELLING POINT
    (index.html, history.html,about.html,contact.html) in HTML...
    In react we will ONLY HAVE on html page that will serve the complete applicaiton or all the pages....
    How react acheives this? BY using "COMPONENTS"

WHAT WE NEED TO RUN REACT APPLCATIONS:
    1. VSC (YEs)
    2. Node JS 
    3. create React application..

1. Components
2. Props
3. State Variables...





General Structure of React App:

index.html is the page that runs - it has id = root div inside it...
index.js access the id "root" renders a "COMPONENT" App by accessing the App.js component....
App.js is the "MAIN" component that is running while react application runs....


1. Components:
    A reusable dynamic area on the page that gets loaded automatically without refreshing the page....

    Two types:
    i)Function Components
    ii)Class Components

    1.Function Components:
    A fucntion component is just like a normal JS function ...but it returns JSX(JavaScript Extension )[JSX is a code mix of HTML,CSS and JavaScript]
    Its name should start with a capital letter (ALWAYS)

     <div className="App">
      <h1>Welcome {name.toUpperCase()}!!!</h1>
      <h1>My First React App</h1>
      <p>This is my first application in React - React is Fun!</p>
    </div>

    Fragments JSX:
    Fragments start with <> and ends with </>... and they wrap around all the JSX but DONOT produce any code for themselves..


      <h1>First Component!</h1>
      <h2>Welcome {name}!</h2>
      {loading ? (
        <h4>Loading....</h4>
      ) : (
        <h2>You are welcome {name.toUpperCase()}</h2>
      )}


March 22:

How to create our own Components?
We create the component and then import it wherever we want it to execute...and execute it by calling like an element <Header/>

Props: properties...Very important!

<p>This is header component</p>
      {props.message ? (
        <p>
          The punch line is: <blockquote>{props.message}</blockquote>
        </p>
      ) : (
        <p>No Punch Line</p>
      )}


      <h2 style={headingStyle}>Header - {props.title}</h2>
      <p style={headingStyle}>Message - {props.message}</p>


const tasks = [
  {
    id: 1,
    text: "Doctor's Appointment",
    day: "April 7th at 1:30pm",
    reminder: true,
  },
  {
    id: 2,
    text: "Shopping",
    day: "April 17th at 11:30am",
    reminder: false,
  },
  {
    id: 3,
    text: "Meeting with boss",
    day: "March 28th  at 1:30pm",
    reminder: true,
  },
];


 const [num, setNum] = useState(0);
  const [name, setName] = useState("Alan");

<p>You clicked {num} times</p>
      <button onClick={() => setNum(num + 1)}>Click</button>
    
    Hooks in React:

    The data stored in components represent the "STATE" in which they are in...

    In react's function components, we use hooks to define the state/variables for the component...

    hooks mantain the state of a function component in react...

    1. useState() hook!
      useState(parameter) defines and returns variable and sets up the initial value to the parameter passed...

      also returns a function that can be used to manipulate the created variable...

      WHENEVER STATE VARIABLE CHANGES...THE COMPONENT GETS RE-RENDERED...

      Temp: 
      {/* <Header title="ABC" message="This is the best company" />
      <Tasks /> */}


      <h2>{name}</h2>
      <button onClick={changeState}>Change</button>

      March 29


      // React developer tools ...

// JSON server! we will  use it...
// npm run build (to make a build folder for publishing)
// sudo npm i -g server ... (to serve this build locally on our own server)
// sudo serve -s build -p 8000 ... NOW localhost:/8000 has become our production server
// in package.json add "server": "json-server --watch db.json --port 8000" in scripts..
// npm run server

// Hooks: useState():
// useEffect() runs with every rendering
// but if we give [] as the second parameter it will only RUN ONCE when application gets loaded...
/* 
  useEffect(() => {
    const fetchTasks = async () => {
      const res = await fetch("http://localhost:8000/tasks");

      const data = await res.json();

      console.log(data);
    };

    fetchTasks();
  }, []);

*/


April 3, 2023...

REST API:

1. GET... is to read or get data from an end point 
2. POST.. to post new data on server...
Go and post my json data on server...

3. PUT... to update the data on server...
Update some data on server..

4. DELETE... to delete the data from server...

JSON.parse() converts JSON data into normal javascript objects to read their properties...

JSON.stringify( ) converts normal javascript into "JSON" objects.. that are transported to the server...


Routing in React:

"/" ... it is called home route... 
"/about"... it means there must be a route which shows any new component..


// <div className="container">
          {/* <Header title="To do" onAdd={changeTask} showAdd={showAddTask} />
          {showAddTask && <AddTask onAdd={addTask} />}
          {tasks.length > 0 ? (
            <Tasks
              tasks={tasks}
              onDelete={deleteTask}
              onToggle={toggleReminder}
            />
          ) : (
            "No tasks "
          )} */


The button "ADD" should not be visible on any other path than HOME...

When we want to read the values from URL ... we use a special react-router-dom hook which is called "useParams"